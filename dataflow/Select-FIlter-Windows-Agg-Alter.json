{
	"name": "Select-FIlter-Windows-Agg-Alter",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "httpsrawsales",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SalesMiniProjectDataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "window1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Branch_ID as string,",
				"          Dealer_ID as string,",
				"          Model_ID as string,",
				"          Revenue as string,",
				"          Units_Sold as integer,",
				"          Date_ID as string,",
				"          Day as string,",
				"          Month as string,",
				"          Year as string,",
				"          BranchName as string,",
				"          DealerName as string,",
				"          Product_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          BranchID = Branch_ID,",
				"          DealerID = Dealer_ID,",
				"          ModelID = Model_ID,",
				"          Revenue,",
				"          UnitsSold = Units_Sold,",
				"          DateID = Date_ID,",
				"          Day,",
				"          Month,",
				"          Year,",
				"          BranchName,",
				"          DealerName,",
				"          ProductName = Product_Name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 filter(Year>'2017') ~> filter1",
				"filter1 derive(ProductName = iif(locate(' ', ProductName)>1,left(ProductName,locate(' ', ProductName)-1),ProductName)) ~> derivedColumn1",
				"derivedColumn1 window(over(ProductName,",
				"          Year),",
				"     desc(UnitsSold, false),",
				"     Ranking = rank()) ~> window1",
				"window1 aggregate(groupBy(ProductName,",
				"          Year),",
				"     AvgUnitsold = avg(UnitsSold),",
				"          HighestUnitSold = first(BranchName),",
				"          lowestUnitSold = last(BranchName),",
				"          TotalUnitsSold = count(UnitsSold)) ~> aggregate1",
				"aggregate1 alterRow(updateIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}